#!/usr/bin/env bash
#
# ROM compilation script
#
# Copyright (C) 2018-2020 KillerDroid96 
#
# Copyright (C) 2016-2018 Nathan Chancellor
#
# This program is free software: you can REDistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>

source $HOME/Github/Scripts/Linux/Shells/shell_colors

###############
#  FUNCTIONS  #
###############
# Colors
RED="$(tput setaf 1)"
RST="$(tput sgr0)"

# Set up a virtual environment for Python
function mkavenv {
    virtualenv2 "${HOME}/venv"
    source "${HOME}/venv/bin/activate"
}

# Remove virtual environment
function rmvenv {
    deactivate
    rm -rf "${HOME}/venv"
}

# Alias for echo to print escape codes
function echo() {
    command echo -e "$@"
}

function make_command() {
    m "${JOBS_FLAG}" "$@"
}

# Number of make threads
if [[ ${OS} = "darwin" ]]; then
    THREADS=$(sysctl hw.ncpu | cut -d " " -f 2)
else
    THREADS=$(($(nproc --all) + 1))
fi
    JOBS_FLAG="-j${THREADS}"

# Prints a formatted header to point out what is being done to the user
function header() {
    if [[ -n ${2} ]]; then
        COLOR=${2}
    else
        COLOR=${RED}
    fi
    echo "${COLOR}"
    echo "====$(for i in $(seq ${#1}); do echo "=\c"; done)===="
    echo "|   ${1}   |"
    echo "====$(for i in $(seq ${#1}); do echo "=\c"; done)===="
    echo "${RST}"
}

# Formats the time
function format_time() {
    MINS=$(((${2} - ${1}) / 60))
    SECS=$(((${2} - ${1}) % 60))
    if [[ ${MINS} -ge 60 ]]; then
        HOURS=$((MINS / 60))
        MINS=$((MINS % 60))
    fi

    if [[ ${HOURS} -eq 1 ]]; then
        TIME_STRING+="1 HR, "
    elif [[ ${HOURS} -ge 2 ]]; then
        TIME_STRING+="${HOURS} HRS, "
    fi

    if [[ ${MINS} -eq 1 ]]; then
        TIME_STRING+="1 MIN"
    else
        TIME_STRING+="${MINS} MINS"
    fi

    if [[ ${SECS} -eq 1 && -n ${HOURS} ]]; then
        TIME_STRING+=", AND 1 SEC"
    elif [[ ${SECS} -eq 1 && -z ${HOURS} ]]; then
        TIME_STRING+=" AND 1 SEC"
    elif [[ ${SECS} -ne 1 && -n ${HOURS} ]]; then
        TIME_STRING+=", AND ${SECS} SECS"
    elif [[ ${SECS} -ne 1 && -z ${HOURS} ]]; then
        TIME_STRING+=" AND ${SECS} SECS"
    fi

    echo "${TIME_STRING}"
}

# Prints an error in bold red
function display_error() {
    echo
    echo "${RED}${1}${RST}"
    [[ -z ${2} ]] && echo
}

# Telegram notifier function
TOKEN=513663559:AAFltOrxX0FGsxW83jVMqProcRBCceeKHeM
CHAT_ID=488672694
function notify_id(){
    curl https://api.telegram.org/bot"${TOKEN}"/getUpdates
}
function notify() {
    if [[ -z ${TOKEN} ]]; then
        display_error "notify() was called but there was no token! Token needed to access telegram!"
        return 1
    fi

    if [[ -z ${CHAT_ID} ]]; then
        display_error "notify() was called but there was no chat ID!"
        return 1
    fi

    curl -s -X POST https://api.telegram.org/bot"${TOKEN}"/sendMessage -d chat_id="${CHAT_ID}" -d parse_mode="Markdown" -d text="$*" 1>/dev/null
}

# Convert a file location to web link
GDRIVE_ID=1K4WG6-fXphFMQORgBk8GDWfEnjn9GrHg
function web_link() {
    if [[ -z ${GDRIVE_ID} ]]; then
        display_error "web_link() was called but there was no ID! ID needed to upload to Google Drive!"
        return 1
    fi
    #gdrive about -c /home/killerdroid96/.gdrive
    gdrive -c /home/killerdroid96/.gdrive sync upload $HOME/Github/Uploads "${GDRIVE_ID}" &> out.log
}

function web_link_about() {
    gdrive about -c /home/killerdroid96/.gdrive
}

###########
# Patches #
###########
function apply_patches(){
    PATCH_LOG=$HOME/Github/CRD/patches.log 
    # cd /home/killerdroid96/Github/CRD/frameworks/base/ #&> ${PATCH_LOG}
    #     git am --signoff < '/home/killerdroid96/Github/CRD_Patches/android_frameworks_base/performance tweaks/0003-Let-s-cut-Max-Excape-Animation-in-Half.patch'
    #     git am --signoff < '/home/killerdroid96/Github/CRD_Patches/android_frameworks_base/performance tweaks/0004-lowered-animations-duration.patch'
    #     git am --signoff < '/home/killerdroid96/Github/CRD_Patches/android_frameworks_base/performance tweaks/0005-aapt-Default-to-0-compression-ratio.patch'
    #     git am --signoff < '/home/killerdroid96/Github/CRD_Patches/android_frameworks_base/performance tweaks/0006-Guard-in-short-circuit-evaluations-for-stringSplit-m.patch'
    #     git am --signoff < '/home/killerdroid96/Github/CRD_Patches/android_frameworks_base/performance tweaks/0007-MountService-Unmount-internal-storage-before-restart.patch'
    #     #git am --signoff < '/home/killerdroid96/Github/CRD_Patches/android_frameworks_base/performance tweaks/0008-Clean-receivers-completely-when-forceStop-the-proces.patch'
    #     git am --signoff < '/home/killerdroid96/Github/CRD_Patches/android_frameworks_base/performance tweaks/0009-ViewConfiguration-Set-scroll-friction-to-0.012.patch'
    #     git am --signoff < '/home/killerdroid96/Github/CRD_Patches/android_frameworks_base/performance tweaks/0010-Factor-out-preference-in-storage-check-to-overridabl.patch'
    #     git am --signoff < '/home/killerdroid96/Github/CRD_Patches/android_frameworks_base/performance tweaks/0012-Speed-Up-Animation-UI.patch'
    #     git am --signoff < '/home/killerdroid96/Github/CRD_Patches/android_frameworks_base/performance tweaks/0013-Speed-up-StatusBar.patch'
    #     git am --signoff < '/home/killerdroid96/Github/CRD_Patches/android_frameworks_base/performance tweaks/0015-SystemUI-Tiny-expanding-improvement.patch'
    #     git am --signoff < '/home/killerdroid96/Github/CRD_Patches/android_frameworks_base/performance tweaks/0017-SystemUI-Remove-data-tile-dialog.patch'
    # cd /home/killerdroid96/Github/CRD/packages/apps/crDroidSettings/
    #    git am --signoff < '/home/killerdroid96/Github/CRD_Patches/android_packages_apps_crDroidSettings/Redirect-OTA.patch'
    cd /home/killerdroid96/Github/CRD/build/make/ #&> ${PATCH_LOG}
        git am --signoff < '/home/killerdroid96/Github/CRD_Patches/android_build/Update-install-graphics.patch' #&> ${PATCH_LOG}

################
# Cherry Picks #
################
    cd /home/killerdroid96/Github/CRD/frameworks/base/ 
        git cherry-pick 6000db73030542debb330fdf615cc461a5c8229f # Long press QS settings for crDroidSettings
        git cherry-pick 95a2f047dde725d26d3d5a11681dc54d15dcfc97 # Unlock keystore with fingerprint after reboot (1/2)
    cd /home/killerdroid96/Github/CRD/packages/apps/crDroidSettings/ 
        git cherry-pick edf23435ba3e13a42a8c9216537ebcfd25021648 # Moved bluetooth battery status to misc under quick settings
        git cherry-pick 69949e1426064e7fccd8086fbaa879050705ef46 # Unlock keystore with fingerprint after reboot (2/2)
}

##############
# Repo Picks #
##############
# function apply_repopicks(){
# }

# Source our universal functions script
# source $HOME/Github/Scripts/Linux/Shells/shell_sources
# source $HOME/Github/Scripts/Linux/Shells/shell_colors

##############
#   BANNER   #
##############
clear
echo ${BLINK_RED}""
echo "=============================================="
echo "|                  ____             _     __ |"
echo "|       __________/ __ \_________  (_)___/ / |"
echo "|      / ___/ ___/ / / / ___/ __ \/ / __  /  |"
echo "|     / /__/ /  / /_/ / /  / /_/ / / /_/ /   |"
echo "|     \___/_/  /_____/_/   \____/_/\__,_/    |"
echo "|     ___              __           _     __ |"
echo "|    /   |  ____  ____/ /________  (_)___/ / |"
echo "|   / /| | / __ \/ __  / ___/ __ \/ / __  /  |"
echo "|  / ___ |/ / / / /_/ / /  / /_/ / / /_/ /   |"
echo "| /_/  |_/_/ /_/\__,_/_/   \____/_/\__,_/    |"
echo "|                                            |"
echo "=============================================="
echo ${RST}""

################
#  PARAMETERS  #
################
export JAVA_HOME=/usr/lib/jvm/jdk8-openjdk
ROM=CRD 
DEVICE=guacamole
VARIANT=userdebug
ROM_FOLDER=${HOME}/Github
WEB_FOLDER=${HOME}/Github/Uploads
TG=true
TG_MSG_FILE=/tmp/tg-msg.build-rom
SYNC=true
MAKE_TARGET=bacon 
CLEAN_TARGET=true
REPOPICK=true

###############
#  VARIABLES  #
###############
# OUT_FOLDER: Directory that holds the compiled ROM files
# SOURCE_FOLDER: Directory that holds the ROM source
# ZIP_MOVE: Directory to hold completed ROM zips
ZIP_MOVE_PARENT=${WEB_FOLDER} #/Github/Uploads

# Otherwise, define them for our various ROMs
case "${ROM}" in
    "CRD"|"DU"|"aosp"|"du-p9x-caf"|"du-o8x-caf"|"lineage-15.1|")
        SOURCE_FOLDER=${ROM_FOLDER}/${ROM}
        ZIP_MOVE=${ZIP_MOVE_PARENT}/${ROM}/${DEVICE}/ROM ;;
    *)
        die "Unknown ROM \"${1}\" passed!" ;;
esac

OUT_FOLDER=${SOURCE_FOLDER}/out/target/product/${DEVICE}


###########################
# MOVE INTO SOURCE FOLDER #
# AND START TRACKING TIME #
###########################

# if [[ ${TG} ]]; then
#  {
#       echo "\`\`\`"
#       echo "Currently Executing..."
#       echo "$(basename "${0}") ${PARAMS}"
#       echo "\`\`\`"
#   } > ${TG_MSG_FILE}
#   notify "$(cat ${TG_MSG_FILE})"
# fi

START=$(date +%s)
cd "${SOURCE_FOLDER}" || die "Source folder does not exist!"

###########################
# SETUP BUILD ENVIRONMENT #
###########################
header "SETTING UP BUILD ENVIRONMENT"
# Check and see if we are on Arch
# If so, activare a virtual environment for proper Python support
[[ -f /etc/arch-release ]] && mkavenv
source build/envsetup.sh
        
##################
# PREPARE DEVICE #
##################
header "PREPARING $(echo ${DEVICE} | awk '{print toupper($0)}')"
# Not all roms use breakfast
case ${ROM} in
    "aosp")
        lunch ${ROM}_${DEVICE}-${VARIANT} ;;
    *)
        breakfast ${DEVICE} ${VARIANT} ;;
esac

#############
# REPO SYNC #
#############
header "REPO SYNC"
echo "Sync Repo?${RST}"
select yn in "Yes" "No"; do
    case $yn in
        Yes ) repo init -u git://github.com/crdroidandroid/android.git -b 9.0
              time repo sync "${JOBS_FLAG}" -f --force-sync --no-clone-bundle; break;;
              #time repo sync "${JOBS_FLAG}" --force-sync -c --no-clone-bundle --no-tags --optimized-fetch --prune --current-branch; break;;
        No ) break;;
    esac
done

##############
# REPO Patch #
##############
header "REPO PATCH"
echo "Do you want to apply patches?${RST}"
select yn in "Yes" "No"; do
    case $yn in
        Yes ) apply_patches
              cd "${SOURCE_FOLDER}" || die "Source folder does not exist!"; break;;
        No ) break;;
    esac
done

# ############
# # REPOPICK #
# ############
# header "REPO PICK"
# echo "Do you want to apply repopicks?"crdc
# select yn in "Yes" "No"; do
#     case $yn in
#         Yes ) apply_repopicks; break;;   
#         No ) break;;
#     esac
# done

#############
# CHANGELOG #
#############
header "CHANGELOG"
changelog=$script_path/changelog.txt
if [ -e $changelog ]; then
    rm -f $changelog
fi

echo "For how many days you want changelog to be generated?${RST}"
read days
until [[ $days =~ ^-?[0-9]+$ ]]; do
    echo "Invalid input - only numbers are allowed"
    read days
done
export changelog_days=$days

###############
# Clean Build #
###############
header "CLEAN BUILD"
echo "Make Clean Build?${RST}"
select yn in "Yes" "No"; do
    case $yn in
        Yes ) make clean && make clobber; break;;
        No ) break;;
    esac
done


############
# BUILDING #
############
header "MAKING FILES"; echo

# if [[ ${TG} ]]; then
#     {
#         echo "\`\`\`"
#         echo "Build Starting... "
#         echo "ROM: ${ROM}"
#         echo "Device: ${DEVICE}"
#         echo "\`\`\`"
#     } > ${TG_MSG_FILE}
#     notify "$(cat ${TG_MSG_FILE})"
# fi

# Set make_target if unset (not all roms use bacon)
make_command "${MAKE_TARGET}"

# There will be a zip in the out folder if successful
FILES=$(find "${OUT_FOLDER}" -maxdepth 1 -name '*.zip' 2>/dev/null)
if [[ -n ${FILES} ]]; then
    # Make build result string reflect successful compilation
    BUILD_RESULT_STRING="Build Successful!"
    SUCCESS=true

    # Make ZIP_MOVE if it doesnt exist or clean it if it does
    if [[ ! -d "${ZIP_MOVE}" ]]; then
        mkdir -p "${ZIP_MOVE}"
    else
        rm -rf "${ZIP_MOVE:?}"/*
    fi

    if [[ $(echo "${FILES}" | wc -l) -eq 1 ]]; then
        mv "${OUT_FOLDER}"/*.zip* "${ZIP_MOVE}"
        cp $OUT_FOLDER/system/etc/Changelog.txt $ZIP_MOVE/changelog.txt 
    else
        for FILE in ${FILES}; do
            if echo "${FILE}" | grep -v -q ota; then
                mv "${FILE}"* "${ZIP_MOVE}"
            fi
        done
    fi
else
    BUILD_RESULT_STRING="BUILD FAILED"
    SUCCESS=false
fi


######################
# ENDING INFORMATION #
######################

# Deactivate virtualenv if we are on arch
[[ -f /etc/arch-release ]] && rmvenv

# Stop tracking time
END=$(date +%s)
TIME_STRING="$(format_time "${START}" "${END}")"

echo ${BLINK_RED}""
echo "=============================================="
echo "|                  ____             _     __ |"
echo "|       __________/ __ \_________  (_)___/ / |"
echo "|      / ___/ ___/ / / / ___/ __ \/ / __  /  |"
echo "|     / /__/ /  / /_/ / /  / /_/ / / /_/ /   |"
echo "|     \___/_/  /_____/_/   \____/_/\__,_/    |"
echo "|     ___              __           _     __ |"
echo "|    /   |  ____  ____/ /________  (_)___/ / |"
echo "|   / /| | / __ \/ __  / ___/ __ \/ / __  /  |"
echo "|  / ___ |/ / / / /_/ / /  / /_/ / / /_/ /   |"
echo "| /_/  |_/_/ /_/\__,_/_/   \____/_/\__,_/    |"
echo "|                                            |"
echo "=============================================="
echo ${RST}""

echo "${RED}${BUILD_RESULT_STRING}!${RST}"
# If the build was successful, print file location, and size
if [[ ${SUCCESS} ]]; then
    echo "${RED}FILE LOCATION: $(web_link "${ZIP_MOVE}")"
    echo "${RED}SIZE: $(du -h "${ZIP_MOVE}"/*.zip | awk '{print $1}')${RST}"
fi

# Print the time the script finished
# and how long it took regardless of success
echo "${RED}TIME: $(date +%D\ %r | awk '{print toupper($0)}')"
echo "${RED}DURATION: ${TIME_STRING}"

if [[ ${TG} ]]; then
    {
        echo "\`\`\`"
        echo " ROM: ${BUILD_RESULT_STRING}!" 
        if [[ ${SUCCESS} ]]; then
        echo "LINK: $(web_link "${ZIP_MOVE}") "
        fi
        echo "SIZE: $(du -h "${ZIP_MOVE}"/*.zip | awk '{print $1}')"
        echo "DATE: $(date +%D\ %r | awk '{print toupper($0)}')"
        echo "TIME: ${TIME_STRING,}   "
        echo "\`\`\`"
    } > ${TG_MSG_FILE}
    notify "$(cat ${TG_MSG_FILE})"
fi

echo "\a"