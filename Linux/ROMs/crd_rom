#!/usr/bin/env bash
#
# ROM compilation script
#
# Copyright (C) 2018-2020 KillerDroid96 
#
# Copyright (C) 2016-2018 Nathan Chancellor
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>

###############
#             #
#  FUNCTIONS  #
#             #
###############

# Source our universal functions script
source $HOME/Github/Scripts/Linux/Shells/shell_sources
source $HOME/Github/Scripts/Linux/Shells/shell_colors

##############
#            #
#   BANNER   #
#            #
##############

clear
echo -e ${red}""
echo -e "========================================="
echo -e "    ______     ____             _     __ "
echo -e "   / ____/____/ __ \_________  (_)___/ / "
echo -e "  / /   / ___/ / / / ___/ __ \/ / __  /  "
echo -e " / /___/ /  / /_/ / /  / /_/ / / /_/ /   "
echo -e " \____/_/  /_____/_/   \____/_/\__,_/    "
echo -e "                                         "
echo -e "========================================="
echo -e ${normal}""


################
#              #
#  PARAMETERS  #
#              #
################

export JAVA_HOME=/usr/lib/jvm/jdk8-openjdk
ROM=CRD
DEVICE=dumpling
VARIANT=userdebug
ROM_FOLDER=${HOME}/Github
WEB_FOLDER=${HOME}/Github/Uploads
TG=true
TG_MSG_FILE=/tmp/tg-msg.build-rom
SYNC=true
MAKE_TARGET=bacon 
CLEAN_TARGET=true
#MERGE=true
REPOPICK=true

function make_command() {
    m "${JOBS_FLAG}" "$@"
}

#if [[ ${TG} ]]; then
#  {
#       echo "\`\`\`"
#       echo "Currently Executing..."
#       echo "$(basename "${0}") ${PARAMS}"
#       echo "\`\`\`"
#   } > ${TG_MSG_FILE}
#   notify "$(cat ${TG_MSG_FILE})"
#fi

###############
#             #
#  VARIABLES  #
#             #
###############

# OUT_FOLDER: Directory that holds the compiled ROM files
# SOURCE_FOLDER: Directory that holds the ROM source
# ZIP_MOVE: Directory to hold completed ROM zips
ZIP_MOVE_PARENT=${WEB_FOLDER} #/Github/Uploads

# Otherwise, define them for our various ROMs
case "${ROM}" in
    "CRD"|"DU"|"aosp"|"du-p9x-caf"|"du-o8x-caf"|"lineage-15.1|")
        SOURCE_FOLDER=${ROM_FOLDER}/${ROM}
        ZIP_MOVE=${ZIP_MOVE_PARENT}/${ROM}/${DEVICE} ;;
    *)
        die "Unknown ROM \"${1}\" passed!" ;;
esac

OUT_FOLDER=${SOURCE_FOLDER}/out/target/product/${DEVICE}


###########################
# MOVE INTO SOURCE FOLDER #
# AND START TRACKING TIME #
###########################

START=$(date +%s)
cd "${SOURCE_FOLDER}" || die "Source folder does not exist!"

###########################
# SETUP BUILD ENVIRONMENT #
###########################
header "SETTING UP BUILD ENVIRONMENT"
# Check and see if we are on Arch
# If so, activare a virtual environment for proper Python support
[[ -f /etc/arch-release ]] && mkavenv
source build/envsetup.sh
        
##################
# PREPARE DEVICE #
##################
header "PREPARING $(echo ${DEVICE} | awk '{print toupper($0)}')"
# Not all roms use breakfast
case ${ROM} in
    "aosp")
        lunch ${ROM}_${DEVICE}-${VARIANT} ;;
    *)
        breakfast ${DEVICE} ${VARIANT} ;;
esac

#############
# REPO SYNC #
#############
header "REPO SYNC"
echo "Sync Repo?${txtrst}"
select yn in "Yes" "No"; do
    case $yn in
        Yes ) repo sync "${JOBS_FLAG}" --force-sync -c --no-clone-bundle --no-tags --optimized-fetch --prune; break;;
        No ) break;;
    esac
done

##############
# REPO MERGE #
##############

# if [[ ${MERGE} ]]; then
#     header "RUNNING MERGE"; echo
#     merge_repos
#     cd "${SOURCE_FOLDER}" || die "Source folder does not exist!"
# fi

############
# REPOPICK #
############
header "REPO PICK"
echo "Do you have any changes to pick?"
select yn in "Yes" "No"; do
    case $yn in
        Yes )   repopick 225213
                repopick 225475
                repopick 225476
                repopick 226402
                repopick 225506
                repopick 225507
                repopick 223374
                repopick 223410
                repopick 223411
                repopick 224945
                repopick 224946
                repopick 224947
                repopick 224948
                repopick 224949
                repopick 224950
                repopick 224951
                repopick 224952
                repopick 224953
                repopick 224954
                repopick 228566
                repopick 228569
                repopick 228570
                repopick 228571
                repopick 228572
                repopick 228573
                repopick 228574
                repopick 228575
                repopick 228576
                repopick 228578
                repopick 228579
                repopick 228580
                repopick 228582
                repopick 228583
                repopick 228584
                repopick 228585 
                repopick 228586
                repopick 228587 
                repopick 223746
                repopick 223748
                repopick 223748
                repopick 225496
                repopick 225497
                repopick 225498
                repopick 225499
                repopick 225829
                repopick 226109
                repopick 226110
                repopick 226127
                repopick 226111
                repopick 229304
                repopick 226128
                repopick 226129
                repopick 226130
                repopick 230271
                repopick 223945
                repopick 225422
                repopick 225423
                repopick 229125
                repopick 230382
                repopick 224675
                repopick 224676
                repopick 224677
                repopick 225551
                repopick 223192
                repopick 223193
                repopick 224752
                repopick 226638
                repopick 226643
                repopick 227260
                repopick 227261
                repopick 226647
                repopick 226648
                repopick 226649
                repopick 226650
                repopick 226651
                repopick 226652
                repopick 226653
                repopick 226654
                repopick 226655
                repopick 226656
                repopick 226658
                repopick 227449
                repopick 227450;;
        No ) break;;
    esac
done

#############
# CHANGELOG #
#############
header "CHANGELOG"
#cleanup old changelog.txt
changelog=$script_path/changelog.txt
#changelog=$WEB_FOLDER/changelog.txt
if [ -e $changelog ]; then
    rm -f $changelog
fi

echo "For how many days you want changelog to be generated?${txtrst}"
read days
until [[ $days =~ ^-?[0-9]+$ ]]; do
    echo "Invalid input - only numbers are allowed"
    read days
done
export changelog_days=$days
echo "Roger... $days days will be set for changelog generation${txtrst}"

###############
# Clean Build #
###############
header "CLEAN BUILD"
echo "Make Clean Build?${txtrst}"
select yn in "Yes" "No"; do
    case $yn in
        Yes ) make clean && make clobber; break;;
        No ) break;;
    esac
done


############
# BUILDING #
############

header "MAKING FILES"; echo

# if [[ ${TG} ]]; then
#     {
#         echo "\`\`\`"
#         echo "Build Starting... "
#         echo "ROM: ${ROM}"
#         echo "Device: ${DEVICE}"
#         echo "\`\`\`"
#     } > ${TG_MSG_FILE}
#     notify "$(cat ${TG_MSG_FILE})"
# fi

# Set make_target if unset (not all roms use bacon)
make_command "${MAKE_TARGET}"

# There will be a zip in the out folder if successful
FILES=$(find "${OUT_FOLDER}" -maxdepth 1 -name '*.zip' 2>/dev/null)
if [[ -n ${FILES} ]]; then
    # Make build result string reflect successful compilation
    BUILD_RESULT_STRING="Build Successful!"
    SUCCESS=true

    # Make ZIP_MOVE if it doesnt exist or clean it if it does
    if [[ ! -d "${ZIP_MOVE}" ]]; then
        mkdir -p "${ZIP_MOVE}"
    else
        rm -rf "${ZIP_MOVE:?}"/*
    fi

    if [[ $(echo "${FILES}" | wc -l) -eq 1 ]]; then
        mv "${OUT_FOLDER}"/*.zip* "${ZIP_MOVE}"
        cp $OUT_FOLDER/system/etc/Changelog.txt $ZIP_MOVE/changelog.txt 
    else
        for FILE in ${FILES}; do
            if echo "${FILE}" | grep -v -q ota; then
                mv "${FILE}"* "${ZIP_MOVE}"
            fi
        done
    fi
else
    BUILD_RESULT_STRING="BUILD FAILED"
    SUCCESS=false
fi


######################
# ENDING INFORMATION #
######################

# Deactivate virtualenv if we are on arch
[[ -f /etc/arch-release ]] && rmvenv

# Stop tracking time
END=$(date +%s)
TIME_STRING="$(format_time "${START}" "${END}")"

header "${BUILD_RESULT_STRING}!"

# If the build was successful, print file location, and size
if [[ ${SUCCESS} ]]; then
    echo "${RED}FILE LOCATION: $(web_link "${ZIP_MOVE}")"
    echo "${RED}SIZE: $(du -h "${ZIP_MOVE}"/*.zip | awk '{print $1}')${RST}"
fi

# Print the time the script finished
# and how long it took regardless of success
echo "${RED}TIME: $(date +%D\ %r | awk '{print toupper($0)}')"
echo "${RED}DURATION: ${TIME_STRING}"

if [[ ${TG} ]]; then
    {
        echo "\`\`\`"
        echo " ROM: ${BUILD_RESULT_STRING}!" 
        if [[ ${SUCCESS} ]]; then
        echo "LINK: $(web_link "${ZIP_MOVE}") "
        fi
        echo "SIZE: $(du -h "${ZIP_MOVE}"/*.zip | awk '{print $1}')"
        echo "DATE: $(date +%D\ %r | awk '{print toupper($0)}')"
        echo "TIME: ${TIME_STRING,}   "
        echo "\`\`\`"
    } > ${TG_MSG_FILE}
    notify "$(cat ${TG_MSG_FILE})"
fi

echo "\a"
