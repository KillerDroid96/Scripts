#!/bin/bash

# Copyright (C) 2018-2020 KillerDroid96
# Copyright (C) 2016-2018 Nathan Chancellor
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>

source $HOME/Github/Scripts/Linux/Shells/shell_colors

function venv() {
    virtualenv2 /tmp/venv;
    source /tmp/venv/bin/activate;
}

function venv_stop(){
    deactivate
    rm -rf "${HOME}/venv"
}

function sync_repo() {
    header "SYNCING LATEST SOURCES"; echo
    repo sync -j$( nproc --all ) --force-sync -c --no-clone-bundle --no-tags --optimized-fetch --prune
}

function gdrive_rom() {
    #outdated use weblink 
    #gdrive about -c /home/matt/.gdrive
    #gdrive -c /home/matt/.gdrive sync upload $HOME/Github/Uploads 1znWrZTRSwAvWgVNHz4hsvEEgaOcrpS8z &> out.log 
    gdrive about -c /home/matt/.gdrive-secondary #&> out.log  
    gdrive -c /home/matt/.gdrive-secondary sync upload $HOME/Github/Uploads 1HTpt92v2AvjcTQtE-CUglOWH90oBiPjp #&> out.log  
    echo "https://drive.google.com/drive/folders/1lOVVWYg_itAPwaUWbMhkvF2P51wzr46v"
}

# Convert a file location to web link
GDRIVE_ID=1K4WG6-fXphFMQORgBk8GDWfEnjn9GrHg
function web_link() {
    if [[ -z ${GDRIVE_ID} ]]; then
        display_error "web_link() was called but there was no ID! ID needed to upload to Google Drive!"
        return 1
    fi
    #gdrive about -c /home/killerdroid96/.gdrive
    gdrive -c /home/killerdroid96/.gdrive sync upload $HOME/Github/Uploads "${GDRIVE_ID}" #&> out.log
}

function web_link_about() {
    gdrive about -c /home/killerdroid96/.gdrive
}


###############
#             #
#  VARIABLES  #
#             #
###############

SOURCE_FOLDER=${ROM_FOLDER}/${ROM}

# What OS are we on?
OS=$(UNAME=$(uname); echo "${UNAME,,}")
# GNU readlink is needed for SCRIPTS_FOLDER
[[ ${OS} = "darwin" ]] && alias readlink=greadlink

HOST=$(uname -n | tr '[:upper:]' '[:lower:]')


# Location of "scripts" folder
SCRIPTS_FOLDER=$(cd "$(dirname "$(readlink -f "${BASH_SOURCE[0]}")")" && pwd)
BIN_FOLDER=${SCRIPTS_FOLDER}/bin

# Common locations amongst scripts
#KERNEL_FOLDER=${HOME}/kernels
#MISC_FOLDER=${HOME}/misc
#REPO_FOLDER=${HOME}/repos
#ROM_FOLDER=${HOME}/roms
#TC_FOLDER=${HOME}/toolchains
#WEB_FOLDER=${HOME}/web

# Number of make threads
if [[ ${OS} = "darwin" ]]; then
    THREADS=$(sysctl hw.ncpu | cut -d " " -f 2)
else
    THREADS=$(($(nproc --all) + 1))
fi
    JOBS_FLAG="-j${THREADS}"

###############
#             #
#  FUNCTIONS  #
#             #
###############

# Formats the time
function format_time() {
    MINS=$(((${2} - ${1}) / 60))
    SECS=$(((${2} - ${1}) % 60))
    if [[ ${MINS} -ge 60 ]]; then
        HOURS=$((MINS / 60))
        MINS=$((MINS % 60))
    fi

    if [[ ${HOURS} -eq 1 ]]; then
        TIME_STRING+="1 HR, "
    elif [[ ${HOURS} -ge 2 ]]; then
        TIME_STRING+="${HOURS} HRS, "
    fi

    if [[ ${MINS} -eq 1 ]]; then
        TIME_STRING+="1 MIN"
    else
        TIME_STRING+="${MINS} MINS"
    fi

    if [[ ${SECS} -eq 1 && -n ${HOURS} ]]; then
        TIME_STRING+=", AND 1 SEC"
    elif [[ ${SECS} -eq 1 && -z ${HOURS} ]]; then
        TIME_STRING+=" AND 1 SEC"
    elif [[ ${SECS} -ne 1 && -n ${HOURS} ]]; then
        TIME_STRING+=", AND ${SECS} SECS"
    elif [[ ${SECS} -ne 1 && -z ${HOURS} ]]; then
        TIME_STRING+=" AND ${SECS} SECS"
    fi

    echo "${TIME_STRING}"
}

# Prints an error in bold red
function display_error() {
    echo
    echo "${RED}${1}${RST}"
    [[ -z ${2} ]] && echo
}

# Prints an error in bold red and exits the script
function die() {
    if [[ ${TG} ]]; then
        # Info must be resourced so public chats don't get notified
        load_botinfo
        {
            echo "\`\`\`"
            echo "An error was detected while running the following command:"
            echo "$(basename "${0}") ${PARAMS}"
            echo "The error was:"
            echo "$*"
            echo "\`\`\`"
        } > /tmp/death-tg-msg
        notify "$(cat /tmp/death-tg-msg)"
    fi

    display_error "$@"
    exit
}

# Prints a warning in bold yellow
function warn() {
    echo
    echo "${YLW}${1}${RST}"
    [[ -z ${2} ]] && echo
}

# Enforces the value needed for two-part flags
function enforce_value() {
    [[ $# -lt 1 ]] && die "A additional value is needed for one of the flags passed to this script!"
}

# Add a remote if it doesn't exist
function add_remote() {
    if ! git remote | grep -q -m 1 "${1}"; then
        git remote add "${1}" "${2}"
    fi
}

# Set up a virtual environment for Python
function mkavenv {
    virtualenv2 "${HOME}/venv"
    source "${HOME}/venv/bin/activate"
}

# Remove virtual environment
function rmvenv {
    deactivate
    rm -rf "${HOME}/venv"
}

# Source Telegram bot information
function load_botinfo() {
    [[ -f ${HOME}/.botinfo ]] && source ~/.botinfo
}
load_botinfo

# Require a parameter to opt out of macOS_check
[[ $# -lt 1 && ${OS} = "darwin" ]] && die "Wrong window! ;)"

# Uploads a given file to transfer.sh
function transfer() {
    file="$1"
    zipname=$(echo "${file}" | awk -F '/' '{print $NF}')
    destination="$2"
    url=$(curl -# -T "${file}" https://transfer.sh/${destination})
    printf '\n'
    echo -e "Download $zipname at $url"
}

# Telegram notifier function
TOKEN=513663559:AAFltOrxX0FGsxW83jVMqProcRBCceeKHeM
CHAT_ID=488672694
function notify_id(){
    curl https://api.telegram.org/bot"${TOKEN}"/getUpdates
}
function notify() {
    if [[ -z ${TOKEN} ]]; then
        display_error "notify() was called but there was no token!"
        return 1
    fi

    if [[ -z ${CHAT_ID} ]]; then
        display_error "notify() was called but there was no chat ID!"
        return 1
    fi

    curl -s -X POST https://api.telegram.org/bot"${TOKEN}"/sendMessage -d chat_id="${CHAT_ID}" -d parse_mode="Markdown" -d text="$*" 1>/dev/null
}

# Telegram uploader function
function tg_upload() {
    local FILE; FILE=${1}; shift

    if [[ -z ${TOKEN} ]]; then
        display_error "tg_upload() was called but there was no token!"
        return 1
    fi

    if [[ -z ${CHAT_ID} ]]; then
        display_error "tg_upload() was called but there was no chat ID!"
        return 1
    fi

    if [[ ! -f ${FILE} ]]; then
        display_error "tg_upload() failed to find ${FILE}!"
        return 1
    fi

    curl -s -F chat_id="${CHAT_ID}" \
            -F document=@"${FILE}" \
            -F caption="${*}" \
            -X POST https://api.telegram.org/bot"${TOKEN}"/sendDocument 1>/dev/null
}

#git pull='git pull --depth=1 -p -j$( nproc --all )'
#git push='git push-j$( nproc --all )'

function apply_patches(){
    PATCH_LOG=$HOME/Github/CRD/patches.log 
    cd /home/killerdroid96/Github/CRD/packages/apps/crDroidSettings/ &> ${PATCH_LOG}
    git apply '/home/killerdroid96/Github/CRD Work/ota.patch' &> ${PATCH_LOG}
    echo ""
    echo "OTA Patch Applied"

    cd /home/killerdroid96/Github/CRD/build/make/ &> ${PATCH_LOG}
    git apply '/home/killerdroid96/Github/CRD Work/mygraphics.patch' &> ${PATCH_LOG}
    echo "Grapchics Patch Applied"
    echo ""
}

#######################################| Merge Functinons |############################################
function merge_cr_repos(){
    cd $HOME/Github/CRD/${REPO_PATH}
    git init &> ${REPO_LOG}
    echo "Fetching Project ${REPO_PATH}" && sleep 1 
    git remote add kd git@github.com:KillerDroid96/${KD_REPO_NAME}.git #&> ${REPO_LOG}
    git remote add cr git@github.com:crdroidandroid/${CR_REPO_NAME}.git #&> ${REPO_LOG}
    git checkout -b kd #&> ${REPO_LOG}
    git checkout kd #&> ${REPO_LOG}
    git pull kd ${KD_BRANCH} ${JOBS_FLAG} #&> ${REPO_LOG}
    git pull cr ${CR_BRANCH} ${JOBS_FLAG} #&> ${REPO_LOG}
    git commit -m "auto merge"  #&> ${REPO_LOG}
    #git push --set-upstream kd ${KD_BRANCH} #&> ${REPO_LOG}
    git push kd HEAD:${KD_BRANCH} #&> ${REPO_LOG}
} 

function cr_repos(){
    REPO_LOG=$HOME/Github/CRD/repos.log 

    REPO_PATH=packages/apps/crDroidSettings
    KD_REPO_NAME=android_packages_apps_crDroidSettings
    CR_REPO_NAME=android_packages_apps_crDroidSettings
    KD_BRANCH=9.0-kd
    CR_BRANCH=9.0
    merge_cr_repos

    REPO_PATH=frameworks/base
    KD_REPO_NAME=android_frameworks_base-cr
    CR_REPO_NAME=android_frameworks_base
    KD_BRANCH=9.0-kd
    CR_BRANCH=9.0
    merge_cr_repos
}
#######################################################################################################

function sync_all(){
    header "SETTING UP BUILD ENVIRONMENT"
    cd $HOME/Github/DU && mkavenv
    header "SYNCING LATEST SOURCES"; echo
    repo sync -j$( nproc --all ) --force-sync -c --no-clone-bundle --no-tags --optimized-fetch --prune
    header "MERGING LATEST SOURCES"; echo
    merge_repos
}

function setup_gitconfig () {
  if ! [ -f git/gitconfig.local.symlink ]
  then
    info 'setup gitconfig'
    git_credential='cache'
    if [ "$(uname -s)" == "Darwin" ]
    then
      git_credential='osxkeychain'
    fi
    user ' - What is your github author name?'
    read -e git_authorname
    user ' - What is your github author email?'
    read -e git_authoremail
    sed -e "s/AUTHORNAME/$git_authorname/g" -e "s/AUTHOREMAIL/$git_authoremail/g" -e "s/GIT_CREDENTIAL_HELPER/$git_credential/g" git/gitconfig.local.symlink.example > git/gitconfig.local.symlink
    success 'gitconfig'
  fi
}

setup_github () {
if ask "Setup Github Login?"; then
    sudo pacman -Syyu git xclip
    ssh-keygen -t rsa -b 4096 -C "killerdroid96@gmail.com"
    eval "$(ssh-agent -s)"
    ssh-add ~/.ssh/id_rsa
    xclip -sel clip < ~/.ssh/id_rsa.pub
    echo "Login to Github & Add SSH Key"
    git config --global user.name "KillerDroid96"
    git config --global user.email "killerdroid96@gmail.com"
    git config --global credential.helper "cache --timeout=7200"
else
    echo "No"
fi
}

function unicorn_banner()
{
	echo -e ${RED}"%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%"
	echo -e ${RED}"%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%"
	echo -e ${RED}"%%%%%%%%%%%%%%             %%%%%%%%%%%%"
	echo -e ${RED}"%%%%%%%%%%%    %%%%%%%%%%%    %%%%%%%%%"
	echo -e ${RED}"%%%%%%%%%   %%%%%%%%%%%%%%%%%   %%%%%%%"
	echo -e ${RED}"%%%%%%%   %%%"${BLK}"&"${RED}"%%%%%%%%%%%"${BLK}"&"${RED}"%%%%%%  %%%%%"
	echo -e ${RED}"%%%%%%  %%%%%%"${BLK}"&&&"${RED}"%%%"${BLK}"&&&"${RED}"%%%"${BLK}"&&&&"${RED}"%%%   %%%"
	echo -e ${RED}"%%%%%  %%%%%%%%"${BLK}"&&&&&&&&&&"${RED}"%%%%%"${BLK}"&&&"${RED}"%%  %%"
	echo -e ${RED}"%%%%  %%%%%%%%%"${BLK}"&&&&&&&&&&&&&&"${RED}"%%%"${BLK}"&&&"${RED}"%%%%"
	echo -e ${RED}"%%%%  %%%%%%%"${BLK}"&&&"${RED}", "${BLK}"&&&&&&&&&&&&&"${RED}"%%"${BLK}"&&&&"${RED}"%%"
	echo -e ${RED}"%%%&  %%%%%"${BLK}"&&&&&&&&&&&&&&&&&&&&&"${RED}"%%%"${BLK}"&&&"${RED}"%"
	echo -e ${RED}"%%%%  %%%%"${BLK}"&&&&&&&&&&&&&&&&&&&&&&&"${RED}"%%"${BLK}"&&&"${RED}"%"
	echo -e ${RED}"%%%%  %%%"${BLK}"&&&&&&"${RED}"%%%%%%%"${BLK}"&&&&&&&&&&&&"${RED}"%"${BLK}"&&"${RED}"%%"
	echo -e ${RED}"%%%%%  %%%%"${BLK}"&&"${RED}"%%%%%%%%%"${BLK}"&&&&&&&&&&&&"${RED}"%"${BLK}"&&"${RED}"%%"
	echo -e ${RED}"%%%%%%  %%%%%%%%%%%%%%"${BLK}"&&&&&&&&&&&&&&"${RED}"%%%"
	echo -e ${RED}"%%%%%%%  %%%%%%%%%%%%"${BLK}"&&&&&&&&&&&&&&"${RED}"%%%%"
	echo -e ${RED}"%%%%%%%%   %%%%%%%%"${BLK}"&&&&&&&&&&&&&&"${RED}"%%%%%%"
	echo -e ${RED}"%%%%%%%%%%%%%%%%"${BLK}"&&&&&&&&&&&&&&&&"${RED}"%%%%%%%"
	echo -e ${RED}"%%%%%%%%%%%%%%"${BLK}"&&&&&&&&&&&&&"${RED}"%%%%%%%%%%%%"
	echo -e ${RED}"%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%"       
}

function du_banners(){
    clear
    echo -e ${red}""
    echo -e "============================================="
    echo -e "               ____  _      __               "
    echo -e "              / __ \(_)____/ /___  __        "
    echo -e "             / / / / / ___/ __/ / / /        "
    echo -e "            / /_/ / / /  / /_/ /_/ /         "
    echo -e "           /_____/_/_/   \__/\__, /          "
    echo -e "    __  __      _           /____/           "
    echo -e "   / / / /___  (_)________  _________  _____ "
    echo -e "  / / / / __ \/ / ___/ __ \/ ___/ __ \/ ___/ "
    echo -e " / /_/ / / / / / /__/ /_/ / /  / / / (__  )  "
    echo -e " \____/_/ /_/_/\___/\____/_/  /_/ /_/____/   "
    echo -e "                                             "
    echo -e "============================================="
    echo -e ${rst}""
}

function crd_banner(){
    echo -e ${red}""
    echo -e "========================================="
    echo -e "    ______     ____             _     __ "
    echo -e "   / ____/____/ __ \_________  (_)___/ / "
    echo -e "  / /   / ___/ / / / ___/ __ \/ / __  /  "
    echo -e " / /___/ /  / /_/ / /  / /_/ / / /_/ /   "
    echo -e " \____/_/  /_____/_/   \____/_/\__,_/    "
    echo -e "                                         "
    echo -e "========================================="
    echo -e ${normal}""
}

# Function run on login to display some stuff and set my custom PS1
function onLogin() {
    export GIT_PS1_SHOWDIRTYSTATE=1
    export GIT_PS1_SHOWSTASHSTATE=1
    export GIT_PS1_SHOWUNTRACKEDFILES=1
    export GIT_PS1_SHOWUPSTREAM=auto
    export GIT_PS1_SHOWCOLORHINTS=1
    unset PS1
    #PS1='[\u@\h \W$(__git_ps1 " (%s)")]\$ '
    if [[ -f "${HOME}/git-prompt.sh" ]]; then
        source ~/git-prompt.sh
        PS1='| \h (\w)$(__git_ps1 " {%s}") |-> '
    else
        PS1='| \h (\w) |-> '
    fi
    clear
    HOST=$(hostname)
    if [[ ${#HOST} -lt 14 ]]; then
        echo -e "${lightgray}";figlet -c "$(hostname)"
    fi
    echo ""
    echo -ne "${red}Today is:\\t\\t${cyan} $(date)"
    echo ""
    echo -e "${red}Kernel Information: \\t${cyan} $(uname -smr)"
    echo -ne "${cyan}"
    upinfo
    echo ""
    echo -e "Welcome to $(hostname), $(whoami)!"
    echo -e
    fortune
}

# Repo sync with various flags I'm lazy to type each time
function syncc() {
    time repo sync --force-broken --force-sync --no-clone-bundle \
             --current-branch --no-tags "$@"
}

alias setperf='echo "performance" | sudo tee /sys/devices/system/cpu/cpu*/cpufreq/scaling_governor'
alias setsave='echo "powersave" | sudo tee /sys/devices/system/cpu/cpu*/cpufreq/scaling_governor'