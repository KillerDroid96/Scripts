#!/bin/bash
#
# MOTD for a server
# 
# Copyright (C) 2018 Matthew Keller <KillerDroid96@gmail.com>
# Weather function taken from neofetch and adapted
#
# Copyright (C) 2017 Nathan Chancellor
# CPU and memory usage functions taken from Screenfetch
#
# Copyright (c) 2010-2016 Brett Bohnenkamper <kittykatt@kittykatt.us>
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>

source $HOME/Github/Scripts/Linux/Shells/shell_colors

function memUsage() {
    MEM_INFO=$( < /proc/meminfo )
    MEM_INFO=$( echo $( echo $( MEM_INFO=${MEM_INFO// /}; echo ${MEM_INFO//kB/}) ) )
    for M in $MEM_INFO; do
        case ${M//:*} in
            "MemTotal") MEM_USED=$((MEM_USED+=${M//*:})); MEM_TOTAL=${M//*:} ;;
            "ShMem") MEM_USED=$((MEM_USED+=${M//*:})) ;;
            "MemFree"|"Buffers"|"Cached"|"SReclaimable") MEM_USED=$((MEM_USED-=${M//*:})) ;;
        esac
    done
    MEM_USED=$((MEM_USED / 1024))
    MEM_TOTAL=$((MEM_TOTAL / 1024))
    PERCENT=$( echo $( echo "scale = 2; (${MEM_USED} / ${MEM_TOTAL})" | bc -l | awk -F '.' '{print $2}' ) | sed s/^0*//g )
    if [[ -z ${PERCENT} ]]; then
        PERCENT=0
    fi

    echo "${MEM_USED}MiB / ${MEM_TOTAL}MiB (${PERCENT}%)"
}

function cpu() {
    CPU=$( awk 'BEGIN{FS=":"} /model name/ { print $2; exit }' /proc/cpuinfo | awk 'BEGIN{FS="@"; OFS="\n"} { print $1; exit }' )
    CPUN=$( grep -c '^processor' /proc/cpuinfo )

    LOC="/sys/devices/system/cpu/cpu0/cpufreq"
    BL="${LOC}/bios_limit"
    SMF="${LOC}/scaling_max_freq"
    if [ -f "${BL}" ] && [ -r "${BL}" ]; then
        CPU_MHZ=$( awk '{print $1/1000}' "${BL}" )
    elif [ -f "${SMF}" ] && [ -r "${SMF}" ]; then
        CPU_MHZ=$( awk '{print $1/1000}' "${SMF}" )
    else
        CPU_MHZ=$( awk -F':' '/cpu MHz/{ print int($2+.5) }' /proc/cpuinfo | head -n 1 )
    fi
    if [ -n "${CPU_MHZ}" ]; then
        if [ $( echo ${CPU_MHZ} | cut -d . -f 1 ) -gt 999 ]; then
            CPU_GHZ=$( awk '{print $1/1000}' <<< "${CPU_MHZ}" )
            CPUFREQ="${CPU_GHZ}GHz"
        else
            CPUFREQ="${CPU_MHZ}MHz"
        fi
    fi

    if [[ "${CPUN}" -gt "1" ]]; then
        CPUN="${CPUN} x"                     
    else
        CPUN=""
    fi
    if [ -z "${CPUFREQ}" ]; then
        CPU="${CPUN} ${CPU}"
    else
        CPU="${CPU} ${CPUN} ${CPUFREQ}"      
    fi

    echo $( sed -r 's/\([tT][mM]\)|\([Rr]\)|[pP]rocessor|CPU//g' <<< "${CPU}" | xargs )
}

function cpuUsage() {
        echo $( grep 'cpu ' /proc/stat | awk '{usage=($2+$4)*100/($2+$4+$5)} END {printf "%.2g%\n", usage}' )
}

function diskUsage() {
    USED=$( df -h | grep -m 1 /dev/nvme0n1p7 | awk '{print $3}' )
    ALL=$( df -h | grep -m 1 /dev/nvme0n1p7 | awk '{print $2}' )
    PERCENT=$( df -h | grep -m 1 /dev/nvme0n1p7 | awk '{print $5}' )

    echo "${USED} / ${ALL} (${PERCENT})"
}

function diskUsage1() {
    USED=$( df -h | grep -m 1 /dev/nvme0n1p5 | awk '{print $3}' )
    ALL=$( df -h | grep -m 1 /dev/nvme0n1p5 | awk '{print $2}' )
    PERCENT=$( df -h | grep -m 1 /dev/nvme0n1p5 | awk '{print $5}' )

    echo "${USED} / ${ALL} (${PERCENT})"
}

#uptime | sed 's/.*up/The system has been up for/' | sed 's/,.*load/ with a system load/'

function upTime() {
    awk '{print int($1/3600)" hr "int(($1%3600)/60)" min "int($1%60)}' /proc/uptime
}

clear && echo -en "\e[3J"
echo -e ${RED}""
echo -e "     _____             _     _    ______               ";
echo -e "    (____ \           (_)   | |  (____  \              ";
echo -e "     _   \ \ ____ ___  _  _ | |   ____)  ) ___ _   _   ";
echo -e "    | |   | / ___/ _ \| |/ || |  |  __  ( / _ ( \ / )  ";
echo -e "    | |__/ | |  | |_| | ( (_| |  | |__)  | |_| ) X (   ";
echo -e "    |_____/|_|   \___/|_|\____|  |______/ \___(_/ \_)  ";
echo -e "                                                       ";
echo -e "    Uptime:" ${WHT}"$( upTime ) sec" ${RED}
echo -e "    Todays Date:" ${WHT}"$( ( LC_ALL=C date "+%B %d, %Y (%A)" ) )" ${RED}
echo -e "    Current Time:" ${WHT}"$( ( LC_ALL=C date "+%I:%M %p %Z" ) )" ${RED}
echo -e "    Operating System:" ${WHT}"$( source /etc/os-release; echo -e "${PRETTY_NAME} \c"; uname -m )" ${RED}
echo -e "    Kernel Version:" ${WHT}"$( uname -r )" ${RED}
echo -e "    Processor:" ${WHT}"$( cpu )" ${RED}
echo -e "    Memory Usage:" ${WHT}"$( memUsage )" ${RED}
echo -e "    Home Usage:" ${WHT}"$( diskUsage )" ${RED}
echo -e "    Root Usage:" ${WHT}"$( diskUsage1 )" ${RED}
echo -e "    CPU Usage:" ${WHT}"$( cpuUsage )" ${RED}
echo -e "\033[0m"