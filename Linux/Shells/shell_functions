#!/bin/bash
########################
#        CREDITS       #
########################
# -KillerDroid96
# -Akhilnarang
# -Nathanchance
########################
source $HOME/Github/Scripts/Linux/Shells/shell_colors
#############
# FUNCTIONS #
#############

### ZSH ###
function lists() {
    functions
    local
    alias
}

confirm() {
    local answer
    echo -ne "zsh: sure you want to run '${YELLOW}$*${NC}' [yN]? "
    read -q answer
        echo
    if [[ "${answer}" =~ ^[Yy]$ ]]; then
        command "${@}"
    else
        return 1
    fi
}

confirm_wrapper() {
    if [ "$1" = '--root' ]; then
        local as_root='true'
        shift
    fi

    local prefix=''

    if [ "${as_root}" = 'true' ] && [ "${USER}" != 'root' ]; then
        prefix="sudo"
    fi
    confirm ${prefix} "$@"
}

poweroff() { confirm_wrapper --root $0 "$@"; }
reboot() { confirm_wrapper --root $0 "$@"; }
hibernate() { confirm_wrapper --root $0 "$@"; }

ask() {
    # https://djm.me/ask
    local prompt default reply
    while true; do
        if [ "${2:-}" = "Y" ]; then
            prompt="Y/n"
            default=Y
        elif [ "${2:-}" = "N" ]; then
            prompt="y/N"
            default=N
        else
            prompt="y/n"
            default=
        fi
        # Ask the question (not using "read -p" as it uses stderr not stdout)
        echo -n "$1 [$prompt] "
        # Read the answer (use /dev/tty in case stdin is redirected from somewhere else)
        read reply </dev/tty
        # Default?
        if [ -z "$reply" ]; then
            reply=$default
        fi
        # Check if the reply is valid
        case "$reply" in
            Y*|y*) return 0 ;;
            N*|n*) return 1 ;;
        esac
    done
}

ask_y(){
if ask "Do you want to Continue?" Y; then
    echo "${green}Continuing${normal}"
else
    echo "${red}Stopping${normal}"
    return
fi
}

ask_n(){
    if ask "Do you want to Continue?" N; then
    echo "${green}Continuing${normal}"
else
    echo "${red}Stopping${normal}"
    return
fi
}

### BASH ###

# Will create [file].bak in the same directory
function backup() { 
    cp "$1"{,.bak};
} 

function calc() { # terminal calculator
    echo "scale=3;$@" | bc -l
}

function cl() { # cd and ls in one
    local dir="$1"
    local dir="${dir:=$HOME}"
    if [[ -d "$dir" ]]; then
        cd "$dir" >/dev/null; ls
    else
        echo "bash: cl: $dir: Directory not found"
    fi
}

function clv() { # cd and ls in one
    local dir="$1"
    local dir="${dir:=$HOME}"
    if [[ -d "$dir" ]]; then
        cd "$dir" >/dev/null; ll
    else
        echo "bash: cl: $dir: Directory not found"
    fi
}

# Prints weather information 
function forcast(){
	clear
	printf "\n Todays Forcast"
    #printf "\n    Todays Forcast : $(curl -s wttr.in/~Pittsburg,KS?0?q?T | awk '/째(C|F)/ {printf $(NF-1) $(NF) " ("a")"} /,/ {a=$0}') \n ${Color_Off}" 
    #printf "                  : $(curl -s wttr.in/~Overland+Park,KS?0?q?T | awk '/째(C|F)/ {printf $(NF-1) $(NF) " ("a")"} /,/ {a=$0}') \n\n ${Color_Off}"
    printf "\n $(curl -s wttr.in/~Pittsburg,KS?0?q?T | awk '/째(C|F)/ {printf $(NF-1) $(NF) " ("a")"} /,/ {a=$0}') \n ${Color_Off}" 
    printf "$(curl -s wttr.in/~Overland+Park,KS?0?q?T | awk '/째(C|F)/ {printf $(NF-1) $(NF) " ("a")"} /,/ {a=$0}') \n\n ${Color_Off}"

}

function ipif() { # lists ip, hostname, city, region, country, loc, org, postal
    if grep -P "(([1-9]\d{0,2})\.){3}(?2)" <<< "$1"; then
    curl ipinfo.io/"$1"
    else
    ipawk=($(host "$1" | awk '/address/ { print $NF }'))
    curl ipinfo.io/${ipawk[1]}
    fi
    echo
}

# Usage mcd test, creates and moves into test directory
function mcd () { 
    mkdir -p $1
    cd $1
}
# Usage todo -l -c -r
function todo() {
    if [[ ! -f $HOME/.todo ]]; then
        touch "$HOME/.todo"
    fi

    if ! (($#)); then
        cat "$HOME/.todo"
    elif [[ "$1" == "-l" ]]; then
        nl -b a "$HOME/.todo"
    elif [[ "$1" == "-c" ]]; then
        > $HOME/.todo
    elif [[ "$1" == "-r" ]]; then
        nl -b a "$HOME/.todo"
        eval printf %.0s- '{1..'"${COLUMNS:-$(tput cols)}"\}; echo
        read -p "Type a number to remove: " number
        sed -i ${number}d $HOME/.todo "$HOME/.todo"
    else
        printf "%s\n" "$*" >> "$HOME/.todo"
    fi
}

function todos () { # Displays items in .note
    echo ""
    echo "==========================="
    echo "|          To Do          |"
    echo "==========================="
    cat $HOME/.todo
    echo "==========================="
    echo ""
}

function todoedit () {
    nano $HOME/.todo
}

function note () { #Usage note test, saves to .notes
        # if file doesn't exist, create it
    if [[ ! -f $HOME/.notes ]]; then
        touch "$HOME/.notes"
    fi

    if ! (($#)); then
        # no arguments, print file
        cat "$HOME/.notes"
    elif [[ "$1" == "-c" ]]; then
        # clear file
        printf "%s" > "$HOME/.notes"
    else
        # add all arguments to file
        printf "%s\n" "| $*" >> "$HOME/.notes"
    fi
}

function notes () { # Displays items in .note
    echo ""
    echo "==========================="
    echo "|          Notes          |"
    echo "==========================="
    cat $HOME/.notes
    echo "==========================="
    echo ""
}

function notesedit () {
    nano $HOME/.notes
}

function numfiles() { # Usage numfiles scripts > 88 files in scripts
    # numfiles test > 10 files in test
    N="$(ls $1 | wc -l)"; 
    echo "$N files in $1";
}

function pps() { # Search for a process containing a given name
ps aux | grep "$@" | grep -v 'grep';
}

function rehistory(){ # history displays comand history, use !208 etc to repeat command
    history | awk '{CMD[$2]++;count++;}END { for (a in CMD)print CMD[a] " " CMD[a]/count*100 "% " a;}' | grep -v "./" | column -c3 -s " " -t | sort -nr | nl |  head -n10
}

function sbs() { # Lists files by size in current directory
    du -b --max-depth 1 | sort -nr | perl -pe 's{([0-9]+)}{sprintf "%.1f%s", $1>=2**30? ($1/2**30, "G"): $1>=2**20? ($1/2**20, "M"): $1>=2**10? ($1/2**10, "K"): ($1, "")}e';
} 

function shopts() {         # Sets Shell Options
    shopt -s cdspell        # This will correct minor spelling errors in a cd command.
    shopt -s histappend     # Append to history rather than overwrite
    shopt -s checkwinsize   # Check window after each command
    shopt -s dotglob        # files beginning with . to be returned in the results of path-name expansion.
    shopt -s no_empty_cmd_completion # Disable completion when the input buffer is empty
    shopt -s 
}

function wheres (){ # Usage whereis scripts, displays all locations with the word scripts (case sensitive)
  find . -name "$1*";
}

function upinfo() {
    echo -ne "${green}$(hostname) ${red}uptime is ${cyan} \\t ";uptime | awk /'up/ {print $3,$4,$5,$6,$7,$8,$9,$10,$11}';
}

function git_config() {
    git config --global user.email "mkeller96@gmail.com"
    git config --global user.name "KillerDroid96"
    git config --global credential.helper "cache --timeout=7200"
    git config -l
}

function mosh1() {
    sudo systemctl enable sshd.service;
    sudo systemctl start sshd.service;
    echo -e "Mosh Server Started";
}

# Neofetch alias
function nf() {
    echo
    neofetch \
        --kernel_shorthand on \
        --distro_shorthand tiny \
        --os_arch off \
        --uptime_shorthand tiny \
        --speed_shorthand on \
        --install_time off \
        --color_blocks off
    echo
    echo
}

function trizens(){
    header "Updating System"
    trizen -Syyu --quiet --noconfirm --noedit --needed
    clear
    header "System Update Complete"
}

function trim_vbox(){
    header "Filling Empty Space"
    # No output is displayed
    sudo dd if=/dev/zero of=/var/tmp/bigemptyfile bs=4096k
    header "Deleting Empty Space"
    sudo rm /var/tmp/bigemptyfile
    header "Ready to Compact VDI"
}