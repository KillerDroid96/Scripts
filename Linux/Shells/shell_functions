#!/bin/bash
########################
#        CREDITS       #
########################
# KillerDroid96        #
# Akhilnarang          #
# Nathanchance         #
########################
source $HOME/Github/Scripts/Linux/Shells/shell_colors

#####################
# NETWORK FUNCTIONS #
#####################

function network() {
    echo '[Network Commands]
System:
    ifconfig
    nmcli (example: nmcli dev show wlp2s0)
    ping (example: ping google.com -c 5)
Functions:
    ipconfig, ipconfig/all
    myip,ip,ipaddr
    ipif  
    pings
    wifitest,speed,speedtest'
}

function ipconfig/all() {
    nmcli dev status
    nmcli connection show
    nmcli -p -m multiline -f all con show
    nmcli device show
}

# lists ip, hostname, city, region, country, loc, org, postal
function ipif() {
    if grep -P "(([1-9]\d{0,2})\.){3}(?2)" <<< "$1"; then
    curl ipinfo.io/"$1"
    else
    #ipawk=($(host "$1" | awk '/address/ { print $NF }'))
    curl ipinfo.io/${ipawk[1]}
    fi
    echo
}

function vpn_menu(){
    header "VPN Menu"
    select yn in "Auto" "Japan" "Australia" "Switzerland" "United Kingdom" "Disconnect" "Exit"; do
        case $yn in
            Auto ) 
                nordvpn connect
                break;;
            Japan ) 
                nordvpn connect JP
                break;;
            Australia ) 
                nordvpn connect AU
                break;;
            Switzerland ) 
                nordvpn connect Switzerland
                break;;
            "United Kingdom" ) 
                nordvpn connect UK
                break;;
            Disconnect ) 
                nordvpn disconnect 
                break;;
            Exit ) 
                break;;
        esac
    done
}

####################
# SYSTEM FUNCTIONS #
####################

function infos(){
    alsi
    nf
}

function pacman_updater(){
    header "Updating System"
    sudo pacman -Scc #Clears cache
    sudo pacman-key --populate archlinux
    echo -e "";
    echo -e "${RED}Pacman command:${WHT} pacman -Syyu --needed --noconfirm --quiet";
    echo -e "";
    sudo pacman -Syyu --needed --noconfirm --quiet
    header "System Update Complete"
}

function yay_updater(){
    header "Updating System"
    yay -Scc #Clears cache
    sudo pacman-key --populate archlinux
    echo -e "";
    echo -e "${RED}Pacman command:${WHT} yay -Syyu --needed --noconfirm --quiet";
    echo -e "";
    yay -Syyu --needed --noconfirm --quiet
    yay -P --stats
    header "System Update Complete"
}

 function aur_updaters(){
    header "System Updater"
    select yn in "Yay" "Pacman" "Exit"; do
        case $yn in
            Yay )   
                header "Updating System"
                yay -Scc #Clears cache
                sudo pacman-key --populate archlinux
                echo -e "";
                echo -e "${RED}Pacman command:${WHT} yay -Syyu --needed --noconfirm --quiet";
                echo -e "";
                yay -Syyu --needed --noconfirm --quiet
                yay -P --stats
                header "System Update Complete"
                break;;
            Pacman ) 
                header "Updating System"
                sudo pacman -Scc #Clears cache
                sudo pacman-key --populate archlinux
                echo -e "";
                echo -e "${RED}Pacman command:${WHT} pacman -Syyu --needed --noconfirm --quiet";
                echo -e "";
                sudo pacman -Syyu --needed --noconfirm --quiet
                header "System Update Complete"
                break;;
            Exit ) break;;
        esac
    done
 }

function prompts(){
    select yn in "clean" "fancy" "info" "simple" "new" "git" "func" "exit"; do
        case $yn in
            clean ) export PS1="\[\033[0;37m\]\342\224\214\342\224\200\$([[ \$? != 0 ]] && echo \"[\[\033[0;31m\]\342\234\227\[\033[0;37m\]]\342\224\200\")[$(if [[ ${EUID} == 0 ]]; then echo '\[\033[0;31m\]\h'; else echo '\[\033[0;31m\]\u\[\033[0;37m\]@\[\033[0;37m\]\h'; fi)\[\033[0;37m\]]\342\224\200[\[\033[0;37m\]\w\[\033[0;37m\]]\n\[\033[0;37m\]\342\224\224\342\224\200\342\224\200\342\225\274 \[\033[0m\]" && break;;
            fancy ) export PS1="\[\e[0m\][\[\033[1;30m\]\d \T\[\e[0m\]]\[\e[0m\]{\[\033[1;30m\]\#\[\e[0m\]} \[\e[0m\]\[\e[0;92m\]\u@\h\[\e[0m\]:\[\e[0;94m\]\w\[\033[1;30m\](\`if [ \$? = 0 ]; then echo \"\[\e[0;92m\]\342\234\223\[\e[0m\]\"; else echo \"\[\e[0;91m\]\342\234\227\[\e[0m\]\"; fi\`\[\033[1;30m\])\[\e[0m\]$ " && break;;
            info ) export PS1="\n\[\033[1;37m\]\342\224\214($(if [[ ${EUID} == 0 ]]; then echo '\[\033[01;31m\]\h'; else echo '\[\033[01;34m\]\u@\h'; fi)\[\033[1;37m\])\342\224\200(\[\033[1;34m\]\$?\[\033[1;37m\])\342\224\200(\[\033[1;34m\]\@ \d\[\033[1;37m\])\[\033[1;37m\]\n\342\224\224\342\224\200(\[\033[1;32m\]\w\[\033[1;37m\])\342\224\200(\[\033[1;32m\]\$(ls -1 | wc -l | sed 's: ::g') files, \$(ls -sh | head -n1 | sed 's/total //')b\[\033[1;37m\])\342\224\200> \[\033[0m\]" && break;;
            simple ) export PS1="\[\e[31m\]\D{%c}\[\e[0m\]\[\e[36m\]\w\[\e[0m\]\n[\[\e[1;43m\]\u\[\e[0m\]@\H]$ " && break;;
            new ) export PS1='\n\e[1;30m[\j:\!\e[1;30m]\e[0;36m \T \d \e[1;30m[\e[1;34m\u@\H\e[1;30m:\e[0;37m`tty 2>/dev/null` \e[0;32m+${SHLVL}\e[1;30m] \e[1;37m\w\e[0;37m\[\033]0;[ ${H1}... ] \w - \u@\H +$SHLVL @`tty 2>/dev/null` - [ `uptime` ]\007\]\n\[\]\$ ' && break;;
            git ) export PS1='\n\[\e[1;37m\]|-- \[\e[1;32m\]\u\[\e[0;39m\]@\[\e[1;36m\]\h\[\e[0;39m\]:\[\e[1;33m\]\w\[\e[0;39m\]\[\e[1;35m\]$(__git_ps1 " (%s)")\[\e[0;39m\] \[\e[1;37m\]--|\[\e[0;39m\]\n$' && break;;
            func ) export PS1='\e];\s\a\n\e[33m\w \e[36m$(hs)\e[m\n$ ' && break;;
            exit ) break;;
        esac
    done
}

function setfonts(){
    select yn in "Latarcyrheb" "TerN" "TerB" "Exit"; do
        case $yn in
            Latarcyrheb ) setfont latarcyrheb-sun32 ;; #&& break;;
            TerN ) setfont ter-132n ;; #&& break;;
            TerB ) setfont ter-132b ;; #&& break;;
            Exit ) break;;
        esac
    done
}

# Useful unarchiver!
function extract () {
        if [ -f $1 ] ; then
                case $1 in
                        *.tar.bz2)    tar xjf $1     ;;
                        *.tar.gz)     tar xzf $1     ;;
                        *.bz2)        bunzip2 $1     ;;
                        *.rar)        rar x $1       ;;
                        *.gz)         gunzip $1      ;;
                        *.tar)        tar xf $1      ;;
                        *.tbz2)       tar xjf $1     ;;
                        *.tgz)        tar xzf $1     ;;
                        *.zip)        unzip $1       ;;
                        *.Z)          uncompress $1  ;;
                        *)            echo "'$1' cannot be extracted via extract()" ;;
                esac
        else
                echo "'$1' is not a valid file"
        fi
}


# Will create [file].bak in the same directory
function backup() { 
    cp "$1"{,.bak};
} 

function upinfo() {
    echo -ne "${green}$(hostname) ${red}uptime is ${cyan} \\t ";uptime | awk /'up/ {print $3,$4,$5,$6,$7,$8,$9,$10,$11}';
}

# terminal calculator
function calc() {
    echo "scale=3;$@" | bc -l
}

# Usage mcd test, creates and moves into test directory
function mcd () { 
    mkdir -p $1
    cd $1
}

# Usage numfiles scripts > 88 files in scripts
function numfiles() { 
    # numfiles test > 10 files in test
    N="$(ls $1 | wc -l)"; 
    echo "$N files in $1";
}

function filetree() {
    ls -R | grep ":$" | sed -e 's/:$//' -e 's/[^-][^\/]*\//--/g' -e 's/^/   /' -e 's/-/|/'
}

# cd and ls in one
function cl() { 
    local dir="$1"
    local dir="${dir:=$HOME}"
    if [[ -d "$dir" ]]; then
        cd "$dir" >/dev/null; ls
    else
        echo "bash: cl: $dir: Directory not found"
    fi
}

# cd and ls in one
function clv() { 
    local dir="$1"
    local dir="${dir:=$HOME}"
    if [[ -d "$dir" ]]; then
        cd "$dir" >/dev/null; ll
    else
        echo "bash: cl: $dir: Directory not found"
    fi
}

# Search for a process containing a given name
function pps() { 
    ps aux | grep "$@" | grep -v 'grep';
}

# history displays comand history, use !208 etc to repeat command
function rehistory(){ 
    history | awk '{CMD[$2]++;count++;}END { for (a in CMD)print CMD[a] " " CMD[a]/count*100 "% " a;}' | grep -v "./" | column -c3 -s " " -t | sort -nr | nl |  head -n10
}

# Lists files by size in current directory
function sbs() { 
    du -b --max-depth 1 | sort -nr | perl -pe 's{([0-9]+)}{sprintf "%.1f%s", $1>=2**30? ($1/2**30, "G"): $1>=2**20? ($1/2**20, "M"): $1>=2**10? ($1/2**10, "K"): ($1, "")}e';
} 

# Usage whereis scripts, displays all locations with the word scripts (case sensitive)
function wheres (){ 
  find . -name "$1*";
}

function git_config() {
    git config --global user.email "killerdroid96@gmail.com"
    git config --global user.name "KillerDroid96"
    git config --global credential.helper "cache --timeout=7200"
    git config -l
}

########
# MISC #
########
# Prints weather information 
function forcast(){
    clear
    printf "\n Todays Forcast"
    printf "\n $(curl -s wttr.in/~Pittsburg,KS?0?q?T | awk '/°(C|F)/ {printf $(NF-1) $(NF) " ("a")"} /,/ {a=$0}') \n ${Color_Off}" 
    printf "$(curl -s wttr.in/~Overland+Park,KS?0?q?T | awk '/°(C|F)/ {printf $(NF-1) $(NF) " ("a")"} /,/ {a=$0}') \n\n ${Color_Off}"
}

# Neofetch alias
function nf() {
    echo
    neofetch \
        --kernel_shorthand on \
        --distro_shorthand tiny \
        --os_arch off \
        --uptime_shorthand tiny \
        --speed_shorthand on \
        --install_time off \
        --color_blocks off
    echo
    echo
}

function mosh1() {
    sudo systemctl enable sshd.service;
    sudo systemctl start sshd.service;
    echo -e "Mosh Server Started";
}

function trim_vbox(){
    header "Filling Empty Space"
    # No output is displayed
    sudo dd if=/dev/zero of=/var/tmp/bigemptyfile bs=4096k
    header "Deleting Empty Space"
    sudo rm /var/tmp/bigemptyfile
    header "Ready to Compact VDI"
}

function git_tips(){
    echo "[Git aliases]
    git='git --no-pager'
    gs='git status'
    gb='git branch -a --color'
    gd='git diff --color'
    gc='git commit'
    gcm='git commit -m'
    ga='git add'
    gaa='git add --all'    
    gac='git add && git commit'
    gaac='git add --all && git commit'
    {gacp,gl,glazy}='git add --all && git commit -m Update && git push'
    gitlog='git log --pretty=oneline'
    gps='git push'
    gpl='git pull'
    gco='git checkout'
    grm='git rm'
    gmv='git mv'
    gcp='git cherry-pick -e'
    gr='git remote'
    gra='git remote add'
    gfa='git fetch --all'
    gf='git fetch'
    gcpa='git cherry-pick --abort'
    gcpc='git cherry-pick --continue'
    grc='git reset'"

    echo "[Git patches]
    gcp -m 1
    git format-patch -1
    git format-patch -10 HEAD --stdout > 0001-last-10-commits.patch
    cat new-feature.patch | git am
    git am < file.patch
    git apply --stat fixemptyposter.patch
    git apply --check fixemptyposter.patch
    git am --signoff < fixemptyposter.patch"

    echo "[Deletes previous commits and pushes current branch]
    git push kd HEAD:9.0-kd --force 
    git push --set-upstream kd 9.0-kd
    git reflog"
}

function general_tips(){
    echo '[Grep examples]
    grep -rl "kill"
    find strings in the rom source: grep -r "TEXTtoFIND"
    find commit msg in the history: git log --grep="<part_of_commit_message>"'
    echo ""
    echo "[System shortcuts]
    CTRL-ESC           | Brings up a tast manager
    CTRL-ALT-ESC       | Point at a rogue application to kill it
    Ctrl-Alt-F1        | Enter's GUI
    Ctrl-Alt-F7        | Exit's GUI
    Ctrl-Alt-F2        | Enter CLI (setfont latarcyrheb-sun32)
    CTRL-ALT-BackSpace | Kills X"
}

function tips(){
    general_tips
    echo ""
    git_tips
}

######################
# QUESTION FUNCTIONS #
######################

# Prints a formatted header to point out what is being done to the user
function header() {
    if [[ -n ${2} ]]; then
        COLOR=${2}
    else
        COLOR=${RED}
    fi
    echo "${COLOR}"
    echo "====$(for i in $(seq ${#1}); do echo "=\c"; done)===="
    echo "|   ${1}   |"
    echo "====$(for i in $(seq ${#1}); do echo "=\c"; done)===="
    echo "${RST}"
}

confirm() {
    local answer
    echo -ne "zsh: sure you want to run '${YELLOW}$*${NC}' [yN]? "
    read -q answer
        echo
    if [[ "${answer}" =~ ^[Yy]$ ]]; then
        command "${@}"
    else
        return 1
    fi
}

confirm_wrapper() {
    if [ "$1" = '--root' ]; then
        local as_root='true'
        shift
    fi

    local prefix=''

    if [ "${as_root}" = 'true' ] && [ "${USER}" != 'root' ]; then
        prefix="sudo"
    fi
    confirm ${prefix} "$@"
}

ask() {
    # https://djm.me/ask
    local prompt default reply
    while true; do
        if [ "${2:-}" = "Y" ]; then
            prompt="Y/n"
            default=Y
        elif [ "${2:-}" = "N" ]; then
            prompt="y/N"
            default=N
        else
            prompt="y/n"
            default=
        fi
        # Ask the question (not using "read -p" as it uses stderr not stdout)
        echo -n "$1 [$prompt] "
        # Read the answer (use /dev/tty in case stdin is redirected from somewhere else)
        read reply </dev/tty
        # Default?
        if [ -z "$reply" ]; then
            reply=$default
        fi
        # Check if the reply is valid
        case "$reply" in
            Y*|y*) return 0 ;;
            N*|n*) return 1 ;;
        esac
    done
}

ask_y(){
if ask "Do you want to Continue?" Y; then
    echo "${green}Continuing${normal}"
else
    echo "${red}Stopping${normal}"
    return
fi
}

ask_n(){
    if ask "Do you want to Continue?" N; then
    echo "${green}Continuing${normal}"
else
    echo "${red}Stopping${normal}"
    return
fi
}

################
# TODO & NOTES #
################

# Usage todo -l -c -r
function todo() {
    if [[ ! -f $HOME/.todo ]]; then
        touch "$HOME/.todo"
    fi

    if ! (($#)); then
        cat "$HOME/.todo"
    elif [[ "$1" == "-l" ]]; then
        nl -b a "$HOME/.todo"
    elif [[ "$1" == "-c" ]]; then
        > $HOME/.todo
    elif [[ "$1" == "-r" ]]; then
        nl -b a "$HOME/.todo"
        eval printf %.0s- '{1..'"${COLUMNS:-$(tput cols)}"\}; echo
        read -p "Type a number to remove: " number
        sed -i ${number}d $HOME/.todo "$HOME/.todo"
    else
        printf "%s\n" "$*" >> "$HOME/.todo"
    fi
}

function todos () { # Displays items in .note
    echo ""
    echo "==========================="
    echo "|          To Do          |"
    echo "==========================="
    cat $HOME/.todo
    echo "==========================="
    echo ""
}

function todoedit () {
    nano $HOME/.todo
}

function note () { #Usage note test, saves to .notes
        # if file doesn't exist, create it
    if [[ ! -f $HOME/.notes ]]; then
        touch "$HOME/.notes"
    fi

    if ! (($#)); then
        # no arguments, print file
        cat "$HOME/.notes"
    elif [[ "$1" == "-c" ]]; then
        # clear file
        printf "%s" > "$HOME/.notes"
    else
        # add all arguments to file
        printf "%s\n" "| $*" >> "$HOME/.notes"
    fi
}

function notes () { # Displays items in .note
    echo ""
    echo "==========================="
    echo "|          Notes          |"
    echo "==========================="
    cat $HOME/.notes
    echo "==========================="
    echo ""
}

function notesedit () {
    nano $HOME/.notes
}

#################
# OLD FUNCTIONS #
#################

#ZSH Commands
poweroff() { confirm_wrapper --root $0 "$@"; }
reboot() { confirm_wrapper --root $0 "$@"; }
hibernate() { confirm_wrapper --root $0 "$@"; }

### ZSH ###
function lists() {
    functions
    local
    alias
}

#function shopts() {        # Sets Shell Options
    shopt -s cdspell        # This will correct minor spelling errors in a cd command.
    shopt -s histappend     # Append to history rather than overwrite
    shopt -s checkwinsize   # Check window after each command
    shopt -s dotglob        # files beginning with . to be returned in the results of path-name expansion.
    shopt -s no_empty_cmd_completion # Disable completion when the input buffer is empty
    shopt -s 
#}

# Install speedtest-cli
function downlsppedtest (){
     header "Downloading speedtest-cli"
     sudo curl -LSo /usr/local/bin/speedtest-cli https://raw.githubusercontent.com/sivel/speedtest-cli/master/speedtest.py
     sudo chmod +x /usr/local/bin/speedtest-cli
}

# Install yay and AUR packages
function install_yay(){
    #cd "${MISC_FOLDER}"/building || die "wtf?"
    curl -LSs -o PKGBUILD "https://aur.archlinux.org/cgit/aur.git/plain/PKGBUILD?h=yay"
    makepkg --noconfirm -si || die "Error installing yay!"
    gpg --recv-keys 702353E0F7E48EDB
    yay -S --needed arm-linux-gnueabi-gcc lineageos-devel || die "Error running yay!"
    yay
}

function dt(){
    date +"%m-%d-%Y"
    date +"%T"
}

# Alias for echo to print escape codes
function echo() {
    command echo -e "$@"
}